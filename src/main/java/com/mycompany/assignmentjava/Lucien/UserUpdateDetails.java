/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.assignmentjava.Lucien;

import java.awt.event.WindowEvent;
import com.mycompany.assignmentjava.Utilites.FileManager;
import com.mycompany.assignmentjava.Utilites.FileManager.FileType;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
/**
 *
 * @author user
 */
public class UserUpdateDetails extends javax.swing.JFrame {
    static String ID;
    static String name;
    static String email;
    static String phone;
    static String role;


    /**
     * Creates new form UserUpdateDetails
     */
    public UserUpdateDetails() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        nameText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        emailText = new javax.swing.JTextField();
        phoneText = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        IDComboBox = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2_CreateUser = new javax.swing.JMenuItem();
        jMenuItem3_updateUser = new javax.swing.JMenuItem();
        jMenuItem1_topUp = new javax.swing.JMenuItem();
        jMenuItem5_receipts = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit & Delete User Details");

        nameText.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Monospaced", 1, 48)); // NOI18N
        jLabel1.setText("Edit User Detials");

        emailText.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N

        phoneText.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N

        jButton1.setFont(new java.awt.Font("Monospaced", 1, 36)); // NOI18N
        jButton1.setText("âœ…ï¸Ž Update");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel2.setText("Email");

        jLabel3.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel3.setText("Name");

        jLabel4.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel4.setText("Phone");

        jLabel5.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel5.setText("UserID");

        IDComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        IDComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDComboBoxActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jButton2.setText("âœ˜ Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jMenu1.setText("âœª Users");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem2_CreateUser.setText("ðŸ—¹ ï¸Ž Create ");
        jMenuItem2_CreateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2_CreateUserActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2_CreateUser);

        jMenuItem3_updateUser.setText("âœ…âœ˜ï¸Žï¸Ž  Ediï¸Žt & Delete");
        jMenuItem3_updateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3_updateUserActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3_updateUser);

        jMenuItem1_topUp.setText("â–² Top-up");
        jMenuItem1_topUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1_topUpActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1_topUp);

        jMenuItem5_receipts.setText("âœ‰ Send Receipts");
        jMenuItem5_receipts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5_receiptsActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5_receipts);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("â«¸ Options");

        jMenuItem4.setText("ðŸž– Logout ");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(IDComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(phoneText, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(emailText, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameText, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addGap(38, 38, 38))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(117, 168, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(144, 144, 144))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(254, 254, 254))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(29, 29, 29))
        );

        List<String> records = FileManager.getAllRecords(FileManager.FileType.USERS);
        List<String> displayRecords = new ArrayList<>();

        for (String record : records) {
            String[] parts = record.split(FileManager.DELIMITER);
            // Ensure there are enough parts to display name, ID, and email.
            if (parts.length >= 6) {
                ID = parts[0];
                name = parts[1];
                email = parts[2];
                role = parts[5];
                phone = parts[3];
                nameText.setText(name);
                emailText.setText(email);
                phoneText.setText(phone);
                // Build a human-readable string
                displayRecords.add(name + " (" + ID + ") - " + email + " (" +role.toUpperCase() + ")");
            } else {
                // If the record doesn't match the expected format, add the raw record.
                displayRecords.add(record);
            }
        }

        // Set the combo box model with the human-readable items
        IDComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(
            displayRecords.toArray(new String[0])
        ));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       String selectedUser = (String) IDComboBox.getSelectedItem();
    if (selectedUser != null && selectedUser.contains("(") && selectedUser.contains(")")) {
        int start = selectedUser.indexOf("(") + 1;
        int end = selectedUser.indexOf(")");
        String extractedID = selectedUser.substring(start, end).trim();

        // Update each field using the correct field indices
        boolean nameUpdated = FileManager.updateSingleField(
            FileType.USERS, extractedID, "name", nameText.getText(), 1
        );
        boolean emailUpdated = FileManager.updateSingleField(
            FileType.USERS, extractedID, "email", emailText.getText(), 2
        );
        boolean phoneUpdated = FileManager.updateSingleField(
            FileType.USERS, extractedID, "phone", phoneText.getText(), 3
        );

        if (nameUpdated && emailUpdated && phoneUpdated) {
            JOptionPane.showMessageDialog(this, "User updated successfully!");
            refreshComboBox(); // Refresh the combobox to reflect changes
        } else {
            JOptionPane.showMessageDialog(this, "Error updating user.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "No user selected.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
            String selectedUser = (String) IDComboBox.getSelectedItem();
    if (selectedUser != null && selectedUser.contains("(") && selectedUser.contains(")")) {
        int start = selectedUser.indexOf("(") + 1;
        int end = selectedUser.indexOf(")");
        String extractedID = selectedUser.substring(start, end).trim();
        
        boolean deleted = Admin.deleteUser(extractedID);
        if (deleted) {
            JOptionPane.showMessageDialog(this, "User deleted successfully!");
            refreshComboBox(); // Refresh combobox after deletion
        } else {
            JOptionPane.showMessageDialog(this, "Error deleting user.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "No user selected.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    
    private void IDComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDComboBoxActionPerformed
        // TODO add your handling code here:

        String selectedUser = (String) IDComboBox.getSelectedItem();
        
        if (selectedUser != null && selectedUser.contains("(") && selectedUser.contains(")")) {
            // Extract the user ID from the format: "Zakwan (75250626) - Zakwan@goodboy.com (CUSTOMER)"
            int start = selectedUser.indexOf("(") + 1;
            int end = selectedUser.indexOf(")");
            String extractedID = selectedUser.substring(start, end).trim();

            // Search for the full record using the extracted ID
            List<String> userDetails = FileManager.searchRecords(FileManager.FileType.USERS, "userID", extractedID);
            
            if (!userDetails.isEmpty()) {
                // Split the record into fields
                String[] parts = userDetails.get(0).split(FileManager.DELIMITER);
                
                if (parts.length >= 6) { // Ensure there are enough fields before accessing them
                    String userID = parts[0];
                    String name = parts[1];
                    String email = parts[2];
                    String phone = parts[3];
                    String role = parts[5];

                    // Populate UI fields
                    nameText.setText(name);
                    emailText.setText(email);
                    phoneText.setText(phone);

                    // If you want to store these values in variables, do this:
                    ID = userID; 
                } else {
                    System.out.println("Invalid user record format.");
                }
            } else {
                System.out.println("User not found.");
            }
        }
    }//GEN-LAST:event_IDComboBoxActionPerformed

    private void jMenuItem2_CreateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2_CreateUserActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new CreateCustomer().setVisible(true);
    }//GEN-LAST:event_jMenuItem2_CreateUserActionPerformed

    private void jMenuItem3_updateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3_updateUserActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new UserUpdateDetails().setVisible(true);
    }//GEN-LAST:event_jMenuItem3_updateUserActionPerformed

    private void jMenuItem1_topUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1_topUpActionPerformed
        // open top-up
        this.dispose();
        new Top_up().setVisible(true);
    }//GEN-LAST:event_jMenuItem1_topUpActionPerformed

    private void jMenuItem5_receiptsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5_receiptsActionPerformed
        // Dispose the current frame
        this.dispose();
        // Create and show a new instance of send_receipts
        new send_receipts().setVisible(true);

    }//GEN-LAST:event_jMenuItem5_receiptsActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new Login().setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserUpdateDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserUpdateDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserUpdateDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserUpdateDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserUpdateDetails().setVisible(true);
            }
        });
    }
    
    private void refreshComboBox() {
    List<String> records = FileManager.getAllRecords(FileManager.FileType.USERS);
    List<String> displayRecords = new ArrayList<>();
    
    for (String record : records) {
        String[] parts = record.split(FileManager.DELIMITER);
        if (parts.length >= 6) {
            String userID = parts[0];
            String name = parts[1];
            String email = parts[2];
            String role = parts[5];
            displayRecords.add(name + " (" + userID + ") - " + email + " (" + role.toUpperCase() + ")");
        } else {
            displayRecords.add(record);
        }
    }
    IDComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(displayRecords.toArray(new String[0])));
}
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> IDComboBox;
    private javax.swing.JTextField emailText;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1_topUp;
    private javax.swing.JMenuItem jMenuItem2_CreateUser;
    private javax.swing.JMenuItem jMenuItem3_updateUser;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5_receipts;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JTextField nameText;
    private javax.swing.JTextField phoneText;
    // End of variables declaration//GEN-END:variables
}
